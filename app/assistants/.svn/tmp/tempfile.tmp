function RunAssistant(){

    this.keys = [Mojo.Char.zero, Mojo.Char.w, Mojo.Char.e, Mojo.Char.r, Mojo.Char.s, Mojo.Char.d, Mojo.Char.f, Mojo.Char.z, Mojo.Char.x, Mojo.Char.c, Mojo.Char.shift, Mojo.Char.spaceBar, Mojo.Char.t, Mojo.Char.g, Mojo.Char.v, Mojo.Char.period];
    this.keysByCode = {};
    
    for (var k=0; k< this.keys.length; k++) {
        this.keysByCode[this.keys[k]] = k;
        this.keys[k] = false;
    }
	
	this.screenBuffer = [];
	this.screenMode = 2; /* 2 - loRes, 1 - hiRes */
    
    Mojo.Log.info('doing chip48');
    this.chip48 = new SChip48(this.keys, this);
    Mojo.Log.info('done chip48');
}

RunAssistant.prototype.screenBufferToggle = function(x, y,msg){
	var scale = this.screenMode * 2;
    var xmod = 128 / this.screenMode;
	var position = y * 128 / this.screenMode + (x % xmod);
	
	var oldBit = this.screenBuffer[position];
	var bit = oldBit ? 0 : 1;
	
	this.screenBuffer[position] = bit;
	
	return(bit);	
}

RunAssistant.prototype.screenClear = function(){
	this.context.fillStyle = "#FFF";
    this.context.fillRect(0,0,320,480);
	for(var i = 0; i < 128*64; i++) {
		this.screenBuffer[i] = 0;
	}
	var pixels = this.divscreen.childNodes;
	var start = new Date().getTime();
	for(var i = 0; i < pixels.length; i++) {
		pixels[i].className = "pixel0";
	}
	$('curkey').innerHTML = new Date().getTime()-start;
	
}


RunAssistant.prototype.putSprite = function(x, y, sprite_bytes, msg){

	   if (msg) {
        //Mojo.Log.info('start', msg);
    }
	var unset = 0;
    var context = this.context;
    var scale = this.screenMode * 2;
    var xmod = 128 / this.screenMode;
    //Mojo.Log.info('scale:',scale);
    //Mojo.Log.info('drawing sprite at',x,y);
    for (var row = 0; row < sprite_bytes.length; row++) {
        var sprite_byte = sprite_bytes[row];
        //Mojo.Log.info("putting row",x,y+row,sprite_byte);
        
        for (var i = 7; i >= 0; i--) {
            var bit = sprite_byte & 1;
            sprite_byte >>= 1;
    
            if (bit) {				
                var result = this.screenBufferToggle(x+i, y+row, msg);
				if(result === 0) {
					unset = 1;
				}
                context.fillStyle = result ? "#000" : "#FFF";
                context.fillRect(((x + i) % xmod) * scale, (y + row) * scale, scale, scale);
                
            }
            
            
            //Mojo.Log.info('fillRect',x,i,xmod,scale,((x+i)%xmod)*scale,y+row*scale);
        
        }
    }
    if (msg) {
        //Mojo.Log.info('DONE:', msg);
    }
    
    return unset;
}

RunAssistant.prototype.drawBuffer = function() {
    for(var y=0; y<64/this.screenMode; y++) {
		for(var x=0; x<16/this.screenMode; x++) {
			//Mojo.Log.info("put",x*8, y, this.screenRows[y][x])
			this.putSprite(x*8, y, this.screenRows[y][x])
		}
	}
}
RunAssistant.prototype.scrollDown = function(n){

}
RunAssistant.prototype.scrollLeft = function(n){

}
RunAssistant.prototype.scrollRight = function(n){

}
RunAssistant.prototype.loRes = function(n){
	this.screenMode = 2;
}

RunAssistant.prototype.hiRes = function(n){
	this.screenMode = 1;
}

RunAssistant.prototype.downHandler = function(event){
	//Mojo.Log.info('keydown:',event.keyCode);
    
	var index = this.keysByCode[event.keyCode];
	//Mojo.Log.info('index is ',index);
    if (index !== undefined) {
        this.keys[index] = true;
    }
	this.chip48.check_keys();
}
RunAssistant.prototype.upHandler = function(event){
	//Mojo.Log.info('keyup:',event.keyCode);
    var index = this.keysByCode[event.keyCode];
	//Mojo.Log.info('index is ',index);
    if (index !== undefined) {
        this.keys[index] = false;
    }
}

RunAssistant.prototype.setup = function(){

    Mojo.Log.info('doing setup');
    var maze = [96, 0, 97, 0, 162, 34, 194, 1, 50, 1, 162, 30, 208, 20, 112, 4, 48, 64, 18, 4, 96, 0, 113, 4, 49, 32, 18, 4, 18, 28, 128, 64, 32, 16, 32, 64, 128, 16];
	var ufo = [162, 205, 105, 56, 106, 8, 217, 163, 162, 208, 107, 0, 108, 3, 219, 195, 162, 214, 100, 29, 101, 31, 212, 81, 103, 0, 104, 15, 34, 162, 34, 172, 72, 0, 18, 34, 100, 30, 101, 28, 162, 211, 212, 83, 110, 0, 102, 128, 109, 4, 237, 161, 102, 255, 109, 5, 237, 161, 102, 0, 109, 6, 237, 161, 102, 1, 54, 128, 34, 216, 162, 208, 219, 195, 205, 1, 139, 212, 219, 195, 63, 0, 18, 146, 162, 205, 217, 163, 205, 1, 61, 0, 109, 255, 121, 254, 217, 163, 63, 0, 18, 140, 78, 0, 18, 46, 162, 211, 212, 83, 69, 0, 18, 134, 117, 255, 132, 100, 212, 83, 63, 1, 18, 70, 109, 8, 141, 82, 77, 8, 18, 140, 18, 146, 34, 172, 120, 255, 18, 30, 34, 162, 119, 5, 18, 150, 34, 162, 119, 15, 34, 162, 109, 3, 253, 24, 162, 211, 212, 83, 18, 134, 162, 248, 247, 51, 99, 0, 34, 182, 0, 238, 162, 248, 248, 51, 99, 50, 34, 182, 0, 238, 109, 27, 242, 101, 240, 41, 211, 213, 115, 5, 241, 41, 211, 213, 115, 5, 242, 41, 211, 213, 0, 238, 1, 124, 254, 124, 96, 240, 96, 64, 224, 160, 248, 212, 110, 1, 109, 16, 253, 24, 0, 238];
	var pong = [106, 2, 107, 12, 108, 63, 109, 12, 162, 234, 218, 182, 220, 214, 110, 0, 34, 212, 102, 3, 104, 2, 96, 96, 240, 21, 240, 7, 48, 0, 18, 26, 199, 23, 119, 8, 105, 255, 162, 240, 214, 113, 162, 234, 218, 182, 220, 214, 96, 1, 224, 161, 123, 254, 96, 4, 224, 161, 123, 2, 96, 31, 139, 2, 218, 182, 96, 12, 224, 161, 125, 254, 96, 13, 224, 161, 125, 2, 96, 31, 141, 2, 220, 214, 162, 240, 214, 113, 134, 132, 135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 70, 2, 18, 120, 70, 63, 18, 130, 71, 31, 105, 255, 71, 0, 105, 1, 214, 113, 18, 42, 104, 2, 99, 1, 128, 112, 128, 181, 18, 138, 104, 254, 99, 10, 128, 112, 128, 213, 63, 1, 18, 162, 97, 2, 128, 21, 63, 1, 18, 186, 128, 21, 63, 1, 18, 200, 128, 21, 63, 1, 18, 194, 96, 32, 240, 24, 34, 212, 142, 52, 34, 212, 102, 62, 51, 1, 102, 3, 104, 254, 51, 1, 104, 2, 18, 22, 121, 255, 73, 254, 105, 255, 18, 200, 121, 1, 73, 2, 105, 1, 96, 4, 240, 24, 118, 1, 70, 64, 118, 254, 18, 108, 162, 242, 254, 51, 242, 101, 241, 41, 100, 20, 101, 0, 212, 85, 116, 21, 242, 41, 212, 85, 0, 238, 128, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0];
	var puzzle = [106, 18, 107, 1, 97, 16, 98, 0, 96, 0, 162, 176, 209, 39, 240, 41, 48, 0, 218, 181, 113, 8, 122, 8, 49, 48, 18, 36, 97, 16, 114, 8, 106, 18, 123, 8, 163, 0, 240, 30, 240, 85, 112, 1, 48, 16, 18, 10, 106, 18, 107, 1, 108, 0, 98, 255, 192, 6, 112, 2, 34, 82, 114, 255, 50, 0, 18, 56, 110, 0, 110, 0, 240, 10, 34, 82, 126, 1, 126, 1, 18, 72, 132, 160, 133, 176, 134, 192, 48, 2, 18, 100, 69, 1, 18, 100, 117, 248, 118, 252, 48, 8, 18, 112, 69, 25, 18, 112, 117, 8, 118, 4, 48, 6, 18, 124, 68, 18, 18, 124, 116, 248, 118, 255, 48, 4, 18, 136, 68, 42, 18, 136, 116, 8, 118, 1, 163, 0, 246, 30, 240, 101, 129, 0, 96, 0, 163, 0, 246, 30, 240, 85, 163, 0, 252, 30, 128, 16, 240, 85, 241, 41, 212, 85, 218, 181, 138, 64, 139, 80, 140, 96, 0, 238, 238, 94, 254, 254, 254, 254, 254, 254, 254, 254];
	var puzzle15 = [0, 224, 108, 0, 76, 0, 110, 15, 162, 3, 96, 32, 240, 85, 0, 224, 34, 190, 34, 118, 34, 142, 34, 94, 34, 70, 18, 16, 97, 0, 98, 23, 99, 4, 65, 16, 0, 238, 162, 232, 241, 30, 240, 101, 64, 0, 18, 52, 240, 41, 210, 53, 113, 1, 114, 5, 100, 3, 132, 18, 52, 0, 18, 34, 98, 23, 115, 6, 18, 34, 100, 3, 132, 226, 101, 3, 133, 210, 148, 80, 0, 238, 68, 3, 0, 238, 100, 1, 132, 228, 34, 166, 18, 70, 100, 3, 132, 226, 101, 3, 133, 210, 148, 80, 0, 238, 68, 0, 0, 238, 100, 255, 132, 228, 34, 166, 18, 94, 100, 12, 132, 226, 101, 12, 133, 210, 148, 80, 0, 238, 68, 0, 0, 238, 100, 252, 132, 228, 34, 166, 18, 118, 100, 12, 132, 226, 101, 12, 133, 210, 148, 80, 0, 238, 68, 12, 0, 238, 100, 4, 132, 228, 34, 166, 18, 142, 162, 232, 244, 30, 240, 101, 162, 232, 254, 30, 240, 85, 96, 0, 162, 232, 244, 30, 240, 85, 142, 64, 0, 238, 60, 0, 18, 210, 34, 28, 34, 216, 34, 28, 162, 248, 253, 30, 240, 101, 141, 0, 0, 238, 124, 255, 205, 15, 0, 238, 125, 1, 96, 15, 141, 2, 237, 158, 18, 216, 237, 161, 18, 226, 0, 238, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 13, 0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 14, 3, 7, 11, 15];
	var brix = [110, 5, 101, 0, 107, 6, 106, 0, 163, 12, 218, 177, 122, 4, 58, 64, 18, 8, 123, 2, 59, 18, 18, 6, 108, 32, 109, 31, 163, 16, 220, 209, 34, 246, 96, 0, 97, 0, 163, 18, 208, 17, 112, 8, 163, 14, 208, 17, 96, 64, 240, 21, 240, 7, 48, 0, 18, 52, 198, 15, 103, 30, 104, 1, 105, 255, 163, 14, 214, 113, 163, 16, 220, 209, 96, 4, 224, 161, 124, 254, 96, 6, 224, 161, 124, 2, 96, 63, 140, 2, 220, 209, 163, 14, 214, 113, 134, 132, 135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 71, 31, 18, 172, 70, 0, 104, 1, 70, 63, 104, 255, 71, 0, 105, 1, 214, 113, 63, 1, 18, 170, 71, 31, 18, 170, 96, 5, 128, 117, 63, 0, 18, 170, 96, 1, 240, 24, 128, 96, 97, 252, 128, 18, 163, 12, 208, 113, 96, 254, 137, 3, 34, 246, 117, 1, 34, 246, 69, 96, 18, 222, 18, 70, 105, 255, 128, 96, 128, 197, 63, 1, 18, 202, 97, 2, 128, 21, 63, 1, 18, 224, 128, 21, 63, 1, 18, 238, 128, 21, 63, 1, 18, 232, 96, 32, 240, 24, 163, 14, 126, 255, 128, 224, 128, 4, 97, 0, 208, 17, 62, 0, 18, 48, 18, 222, 120, 255, 72, 254, 104, 255, 18, 238, 120, 1, 72, 2, 104, 1, 96, 4, 240, 24, 105, 255, 18, 112, 163, 20, 245, 51, 242, 101, 241, 41, 99, 55, 100, 0, 211, 69, 115, 5, 242, 41, 211, 69, 0, 238, 224, 0, 128, 0, 252, 0, 170, 0, 0, 0, 0, 0];
	
	/* Font test
	 * 
	 * 6100
	 * 6200
	 * 6300
	 * F329
	 * D125
	 * 6108
	 * 6301
	 * F329
	 * D125
	 */
	var fonttest = [0x62,0x00,
	0x61,0x00,0x63,0x01,0xF3,0x29,0xD1,0x25,
	0x61,0x08,0x63,0x03,0xF3,0x29,0xD1,0x25,
	0x61,0x10,0x63,0x05,0xF3,0x29,0xD1,0x25,
	0x61,0x18,0x63,0x07,0xF3,0x29,0xD1,0x25,
	0x61,0x20,0x63,0x09,0xF3,0x29,0xD1,0x25,
	0x61,0x28,0x63,0x0B,0xF3,0x29,0xD1,0x25,
	0x61,0x30,0x63,0x0D,0xF3,0x29,0xD1,0x25,
	0x61,0x38,0x63,0x0F,0xF3,0x29,0xD1,0x25,
	0x62,0x10,
	0x61,0x00,0x63,0x02,0xF3,0x29,0xD1,0x25,
	0x61,0x08,0x63,0x04,0xF3,0x29,0xD1,0x25,
	0x61,0x10,0x63,0x06,0xF3,0x29,0xD1,0x25,
	0x61,0x18,0x63,0x08,0xF3,0x29,0xD1,0x25,
	0x61,0x20,0x63,0x0A,0xF3,0x29,0xD1,0x25,
	0x61,0x28,0x63,0x0C,0xF3,0x29,0xD1,0x25,
	0x61,0x30,0x63,0x0E,0xF3,0x29,0xD1,0x25,
	
	0x00,0x00
	];
    var canvas = document.getElementById('chip48screen');
	this.canvas = canvas;
    this.context = this.canvas.getContext('2d');
    var divscreen = document.getElementById('chip48divscreen');
	this.divscreen = divscreen;
	var start = new Date().getTime();
	var base_d = document.createElement('div');
    base_d.className = "pixel0";
    for (var i = 0; i < (64 * 128); i++) {
        divscreen.appendChild(base_d.cloneNode(false));      
    }
	
	Mojo.Log.info("child node count:",this.divscreen.childNodes.length);
	this.divscreen.childNodes[32].className = "pixel1";
	this.divscreen.childNodes[34].className = "pixel1";
	
	$('curkey').innerHTML = new Date().getTime() - start;
	
    //this.drawBuffer();
    document.addEventListener('keydown', this.downHandler.bind(this), false);
    
    document.addEventListener('keyup', this.upHandler.bind(this), false);
    
	this.canvas.addEventListener('mousedown', function(event) { $('curkey').innerHTML = Math.floor(event.x/4)+","+Math.floor((event.y-canvas.offsetTop)/4);})
	this.chip48.load(brix);
	
}

RunAssistant.prototype.activate = function() {
	
	//this.screenClear();
	//this.chip48.run();

}

